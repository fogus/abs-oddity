Observation:

Overriding a core function and then compiling the namespace that contains it leads to an unbound Var exception when that namespace is later loaded and that function run in a later version of Clojure.

Background:

This popped up because Clojure 1.11 created a core function `abs`. There are some libraries that have compiled artifacts with that function name from previous versions of Clojure that are then run with version 1.11.

Notes:

* This same behavior happens for all new Vars in core added in 1.11 (update-vals/keys, iteration, etc.)

* This same behavior is observable if a use different versions of Clojure and try to override a core function that is new to the later version. For example, I ran a similar set of tests for a function called `add-tap` (added in 1.10) compiled with 1.9 and run with 1.10.

---

Deps should have 1.10.3 as dep.

In shell:

    clj -T:build compile-clj
    clj

In REPL

    ;; Clojure 1.10.3
    user=> (require '[fogus.oddity :as o])
    nil
    user=> (o/abs "A")
    "/tmp/A"
    user=> o/abs
    #object[fogus.oddity$abs 0x286b39c2 "fogus.oddity$abs@286b39c2"]

Change deps.edn to use Clojure 1.11.0, then relaunch `clj`

In REPL

    ;; Clojure 1.11.0
    user=> (require '[fogus.oddity :as o])
    nil
    user=> (o/abs "A")
    Syntax error compiling at (REPL:1:1).
    No such var: o/abs
    user=> o/abs
    Syntax error compiling at (REPL:0:0).
    No such var: o/abs

**NOTE: There was _NO_ warning about abs override when the `require` was called.**

Now while still depending on 1.11.0, clean and recompile

    clj -T:build clean
    clj -T:build compile-clj

Rerunning the REPL with `clj`

    ;; Clojure 1.11.0
    user=> (require '[fogus.oddity :as o])
    WARNING: abs already refers to: #'clojure.core/abs in namespace: fogus.oddity, being replaced by: #'fogus.oddity/abs
    nil
    user=> (o/abs "A")
    "/tmp/A"
    user=> o/abs
    #object[fogus.oddity$abs 0x7b60c3e "fogus.oddity$abs@7b60c3e"]

---

Some interesting observations while running 1.11.0:

    (get (ns-map 'fogus.oddity) 'abs)
    #'clojure.core/abs

In 1.10.3 this is #'fogus.oddity/abs

If I add a `(:gen-class)` directive to the `fogus.oddity` namespace, then compile with 1.10.3 and run with 1.11.0 I see slightly different behavior.

    ;; Clojure 1.11.0
    user=> (require '[fogus.oddity :as o])
    WARNING: abs already refers to: #'clojure.core/abs in namespace: fogus.oddity, being replaced by: #'fogus.oddity/abs
    nil
    user=> (o/abs "A")
    Execution error (IllegalStateException) at user/eval3 (REPL:1).
    Attempting to call unbound fn: #'fogus.oddity/abs
    user=> (get (ns-map 'fogus.oddity) 'abs)
    #'fogus.oddity/abs

That is, the override warning happens and the Var is mapped in the ns but the Var is still reported as unbound.

The same behavior is observed if I add a main to fogus.oddity that calls its abs and that is compiled with 1.10.3 and a jar created and run with 1.11.0.

